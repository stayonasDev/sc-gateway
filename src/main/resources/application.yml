server:
  port: 9000

spring:
  application:
    name: only-apigateway-service 
  
  cloud:
    gateway:
      routes:
        - id: hello_route # 새로 추가할 라우트의 ID
          uri: http://localhost:8765 # 타겟 서비스의 URI
          predicates:
            - Path=/hello # 매칭할 경로 (정확히 /hello)

          # hello_route
          # 1.http://localhost:9000/hello 로 들어오면
          # 2.http://localhost:8765/hello 로 연결



        - id: abc2hello_route # 새로 추가할 라우트의 ID
          uri: http://localhost:8765 # 타겟 서비스의 URI
          predicates:
            - Path=/abc
          # abc2hello_route
          # 1. http://localhost:9000/abc로 들어오면
          # 2. http://localhost:8765/abc로 연결



        - id: abc2hello_ok_route # 새로 추가할 라우트의 ID
          uri: http://localhost:8765 # 타겟 서비스의 URI
          predicates:
            - Path=/abc2
          filters:
            - RewritePath=/abc2, /hello
           # abc2hello_ok_route
           # 1. http://localhost:9000/abc2로 들어오면
           # 2. 필터에서 abc2를 hello로 바꾸면서 설정된 uri로 보냄
           # 3. http://localhost:8765/hello로 연결
          


logging:
  level:
    # Spring Cloud Gateway의 라우팅, 필터 체인 관련 로그
    org.springframework.cloud.gateway: DEBUG 
    
    # 리액터(Netty) 네트워크 통신 로그 (요청/응답 상세)
    reactor.netty: DEBUG 
    
    # Spring WebFlux (게이트웨이 기반 기술) 관련 로그
    org.springframework.web.reactive: DEBUG
